/*
 * Goldfin Invoice Processing API
 * Goldfin Invoice Analysis API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: rhodges@skylineresearch.comm
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.goldfin.front.invoice.api.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import javax.validation.constraints.*;

/**
 * A storage device such as SSD or HD
 */
@ApiModel(description = "A storage device such as SSD or HD")

public class StorageDevice   {
  @JsonProperty("name")
  private String name = null;

  @JsonProperty("capacity")
  private Long capacity = null;

  /**
   * Storage type
   */
  public enum StorageTypeEnum {
    SSD("SSD"),
    
    HD("HD");

    private String value;

    StorageTypeEnum(String value) {
      this.value = value;
    }

    @Override
    @JsonValue
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StorageTypeEnum fromValue(String text) {
      for (StorageTypeEnum b : StorageTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("storageType")
  private StorageTypeEnum storageType = null;

  @JsonProperty("model")
  private String model = null;

  @JsonProperty("manufacturer")
  private String manufacturer = null;

  /**
   * Storage interface type
   */
  public enum InterfaceTypeEnum {
    SATA_2("SATA-2"),
    
    SATA_3("SATA-3"),
    
    OTHER("OTHER");

    private String value;

    InterfaceTypeEnum(String value) {
      this.value = value;
    }

    @Override
    @JsonValue
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static InterfaceTypeEnum fromValue(String text) {
      for (InterfaceTypeEnum b : InterfaceTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("interfaceType")
  private InterfaceTypeEnum interfaceType = null;

  /**
   * RAID type
   */
  public enum RaidTypeEnum {
    NONE("NONE"),
    
    RAID1("RAID1"),
    
    RAID5("RAID5"),
    
    RAID10("RAID10"),
    
    OTHER("OTHER");

    private String value;

    RaidTypeEnum(String value) {
      this.value = value;
    }

    @Override
    @JsonValue
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static RaidTypeEnum fromValue(String text) {
      for (RaidTypeEnum b : RaidTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("raidType")
  private RaidTypeEnum raidType = null;

  public StorageDevice name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Device name
   * @return name
   **/
  @JsonProperty("name")
  @ApiModelProperty(value = "Device name")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public StorageDevice capacity(Long capacity) {
    this.capacity = capacity;
    return this;
  }

  /**
   * Capacity in bytes
   * @return capacity
   **/
  @JsonProperty("capacity")
  @ApiModelProperty(value = "Capacity in bytes")
  public Long getCapacity() {
    return capacity;
  }

  public void setCapacity(Long capacity) {
    this.capacity = capacity;
  }

  public StorageDevice storageType(StorageTypeEnum storageType) {
    this.storageType = storageType;
    return this;
  }

  /**
   * Storage type
   * @return storageType
   **/
  @JsonProperty("storageType")
  @ApiModelProperty(value = "Storage type")
  public StorageTypeEnum getStorageType() {
    return storageType;
  }

  public void setStorageType(StorageTypeEnum storageType) {
    this.storageType = storageType;
  }

  public StorageDevice model(String model) {
    this.model = model;
    return this;
  }

  /**
   * Device model name
   * @return model
   **/
  @JsonProperty("model")
  @ApiModelProperty(value = "Device model name")
  public String getModel() {
    return model;
  }

  public void setModel(String model) {
    this.model = model;
  }

  public StorageDevice manufacturer(String manufacturer) {
    this.manufacturer = manufacturer;
    return this;
  }

  /**
   * Device manufacturer
   * @return manufacturer
   **/
  @JsonProperty("manufacturer")
  @ApiModelProperty(value = "Device manufacturer")
  public String getManufacturer() {
    return manufacturer;
  }

  public void setManufacturer(String manufacturer) {
    this.manufacturer = manufacturer;
  }

  public StorageDevice interfaceType(InterfaceTypeEnum interfaceType) {
    this.interfaceType = interfaceType;
    return this;
  }

  /**
   * Storage interface type
   * @return interfaceType
   **/
  @JsonProperty("interfaceType")
  @ApiModelProperty(value = "Storage interface type")
  public InterfaceTypeEnum getInterfaceType() {
    return interfaceType;
  }

  public void setInterfaceType(InterfaceTypeEnum interfaceType) {
    this.interfaceType = interfaceType;
  }

  public StorageDevice raidType(RaidTypeEnum raidType) {
    this.raidType = raidType;
    return this;
  }

  /**
   * RAID type
   * @return raidType
   **/
  @JsonProperty("raidType")
  @ApiModelProperty(value = "RAID type")
  public RaidTypeEnum getRaidType() {
    return raidType;
  }

  public void setRaidType(RaidTypeEnum raidType) {
    this.raidType = raidType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StorageDevice storageDevice = (StorageDevice) o;
    return Objects.equals(this.name, storageDevice.name) &&
        Objects.equals(this.capacity, storageDevice.capacity) &&
        Objects.equals(this.storageType, storageDevice.storageType) &&
        Objects.equals(this.model, storageDevice.model) &&
        Objects.equals(this.manufacturer, storageDevice.manufacturer) &&
        Objects.equals(this.interfaceType, storageDevice.interfaceType) &&
        Objects.equals(this.raidType, storageDevice.raidType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, capacity, storageType, model, manufacturer, interfaceType, raidType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StorageDevice {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    capacity: ").append(toIndentedString(capacity)).append("\n");
    sb.append("    storageType: ").append(toIndentedString(storageType)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    manufacturer: ").append(toIndentedString(manufacturer)).append("\n");
    sb.append("    interfaceType: ").append(toIndentedString(interfaceType)).append("\n");
    sb.append("    raidType: ").append(toIndentedString(raidType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

