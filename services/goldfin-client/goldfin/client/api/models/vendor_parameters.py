# coding: utf-8

"""
    Goldfin Service API

    REST API for Goldfin Intelligent Invoice Processing

    OpenAPI spec version: 1.0.0
    Contact: info@goldfin.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class VendorParameters(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'identifier': 'str',
        'name': 'str',
        'state': 'str'
    }

    attribute_map = {
        'identifier': 'identifier',
        'name': 'name',
        'state': 'state'
    }

    def __init__(self, identifier=None, name=None, state=None):
        """
        VendorParameters - a model defined in Swagger
        """

        self._identifier = None
        self._name = None
        self._state = None

        if identifier is not None:
          self.identifier = identifier
        if name is not None:
          self.name = name
        if state is not None:
          self.state = state

    @property
    def identifier(self):
        """
        Gets the identifier of this VendorParameters.
        Key used to describe vendor for accounting purposes

        :return: The identifier of this VendorParameters.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """
        Sets the identifier of this VendorParameters.
        Key used to describe vendor for accounting purposes

        :param identifier: The identifier of this VendorParameters.
        :type: str
        """

        self._identifier = identifier

    @property
    def name(self):
        """
        Gets the name of this VendorParameters.
        Vendor name

        :return: The name of this VendorParameters.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this VendorParameters.
        Vendor name

        :param name: The name of this VendorParameters.
        :type: str
        """

        self._name = name

    @property
    def state(self):
        """
        Gets the state of this VendorParameters.
        Current state of the vendor.  Active vendors have current inventory and invoices.

        :return: The state of this VendorParameters.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this VendorParameters.
        Current state of the vendor.  Active vendors have current inventory and invoices.

        :param state: The state of this VendorParameters.
        :type: str
        """
        allowed_values = ["ACTIVE", "INACTIVE"]
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, VendorParameters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
