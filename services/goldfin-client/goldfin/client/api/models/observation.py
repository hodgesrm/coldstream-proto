# coding: utf-8

"""
    Goldfin Service API

    REST API for Goldfin Intelligent Invoice Processing

    OpenAPI spec version: 1.0.0
    Contact: info@goldfin.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Observation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'vendor_identifier': 'str',
        'effective_date': 'datetime',
        'description': 'str',
        'observation_type': 'str',
        'data': 'str',
        'version': 'str'
    }

    attribute_map = {
        'vendor_identifier': 'vendorIdentifier',
        'effective_date': 'effectiveDate',
        'description': 'description',
        'observation_type': 'observationType',
        'data': 'data',
        'version': 'version'
    }

    def __init__(self, vendor_identifier=None, effective_date=None, description=None, observation_type=None, data=None, version=None):
        """
        Observation - a model defined in Swagger
        """

        self._vendor_identifier = None
        self._effective_date = None
        self._description = None
        self._observation_type = None
        self._data = None
        self._version = None

        if vendor_identifier is not None:
          self.vendor_identifier = vendor_identifier
        if effective_date is not None:
          self.effective_date = effective_date
        if description is not None:
          self.description = description
        if observation_type is not None:
          self.observation_type = observation_type
        if data is not None:
          self.data = data
        if version is not None:
          self.version = version

    @property
    def vendor_identifier(self):
        """
        Gets the vendor_identifier of this Observation.
        Vendor identifier key

        :return: The vendor_identifier of this Observation.
        :rtype: str
        """
        return self._vendor_identifier

    @vendor_identifier.setter
    def vendor_identifier(self, vendor_identifier):
        """
        Sets the vendor_identifier of this Observation.
        Vendor identifier key

        :param vendor_identifier: The vendor_identifier of this Observation.
        :type: str
        """

        self._vendor_identifier = vendor_identifier

    @property
    def effective_date(self):
        """
        Gets the effective_date of this Observation.
        Effective date when observation was made

        :return: The effective_date of this Observation.
        :rtype: datetime
        """
        return self._effective_date

    @effective_date.setter
    def effective_date(self, effective_date):
        """
        Sets the effective_date of this Observation.
        Effective date when observation was made

        :param effective_date: The effective_date of this Observation.
        :type: datetime
        """

        self._effective_date = effective_date

    @property
    def description(self):
        """
        Gets the description of this Observation.
        Optional description of observation

        :return: The description of this Observation.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Observation.
        Optional description of observation

        :param description: The description of this Observation.
        :type: str
        """

        self._description = description

    @property
    def observation_type(self):
        """
        Gets the observation_type of this Observation.
        Kind of observation, e.g., host inventory.

        :return: The observation_type of this Observation.
        :rtype: str
        """
        return self._observation_type

    @observation_type.setter
    def observation_type(self, observation_type):
        """
        Sets the observation_type of this Observation.
        Kind of observation, e.g., host inventory.

        :param observation_type: The observation_type of this Observation.
        :type: str
        """
        allowed_values = ["HOST_INVENTORY"]
        if observation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `observation_type` ({0}), must be one of {1}"
                .format(observation_type, allowed_values)
            )

        self._observation_type = observation_type

    @property
    def data(self):
        """
        Gets the data of this Observation.
        String containing serialized observations

        :return: The data of this Observation.
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """
        Sets the data of this Observation.
        String containing serialized observations

        :param data: The data of this Observation.
        :type: str
        """

        self._data = data

    @property
    def version(self):
        """
        Gets the version of this Observation.
        Data format version

        :return: The version of this Observation.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this Observation.
        Data format version

        :param version: The version of this Observation.
        :type: str
        """

        self._version = version

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Observation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
