# coding: utf-8

"""
    Goldfin Service Admin API

    REST API for Goldfin Service Administration

    OpenAPI spec version: 1.0.0
    Contact: info@goldfin.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Host(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'host_id': 'str',
        'host_type': 'str',
        'host_model': 'str',
        'observation_id': 'str',
        'resource_id': 'str',
        'effective_date': 'datetime',
        'identifier': 'str',
        'vendor': 'str',
        'region': 'str',
        'zone': 'str',
        'cpu': 'str',
        'socket_count': 'int',
        'core_count': 'int',
        'ram': 'int',
        'hdd': 'int',
        'ssd': 'int',
        'nic_count': 'int',
        'network_traffic_limit': 'int'
    }

    attribute_map = {
        'host_id': 'hostId',
        'host_type': 'hostType',
        'host_model': 'hostModel',
        'observation_id': 'observationId',
        'resource_id': 'resourceId',
        'effective_date': 'effectiveDate',
        'identifier': 'identifier',
        'vendor': 'vendor',
        'region': 'region',
        'zone': 'zone',
        'cpu': 'cpu',
        'socket_count': 'socketCount',
        'core_count': 'coreCount',
        'ram': 'ram',
        'hdd': 'hdd',
        'ssd': 'ssd',
        'nic_count': 'nicCount',
        'network_traffic_limit': 'networkTrafficLimit'
    }

    def __init__(self, host_id=None, host_type=None, host_model=None, observation_id=None, resource_id=None, effective_date=None, identifier=None, vendor=None, region=None, zone=None, cpu=None, socket_count=None, core_count=None, ram=None, hdd=None, ssd=None, nic_count=None, network_traffic_limit=None):
        """
        Host - a model defined in Swagger
        """

        self._host_id = None
        self._host_type = None
        self._host_model = None
        self._observation_id = None
        self._resource_id = None
        self._effective_date = None
        self._identifier = None
        self._vendor = None
        self._region = None
        self._zone = None
        self._cpu = None
        self._socket_count = None
        self._core_count = None
        self._ram = None
        self._hdd = None
        self._ssd = None
        self._nic_count = None
        self._network_traffic_limit = None

        if host_id is not None:
          self.host_id = host_id
        if host_type is not None:
          self.host_type = host_type
        if host_model is not None:
          self.host_model = host_model
        if observation_id is not None:
          self.observation_id = observation_id
        if resource_id is not None:
          self.resource_id = resource_id
        if effective_date is not None:
          self.effective_date = effective_date
        if identifier is not None:
          self.identifier = identifier
        if vendor is not None:
          self.vendor = vendor
        if region is not None:
          self.region = region
        if zone is not None:
          self.zone = zone
        if cpu is not None:
          self.cpu = cpu
        if socket_count is not None:
          self.socket_count = socket_count
        if core_count is not None:
          self.core_count = core_count
        if ram is not None:
          self.ram = ram
        if hdd is not None:
          self.hdd = hdd
        if ssd is not None:
          self.ssd = ssd
        if nic_count is not None:
          self.nic_count = nic_count
        if network_traffic_limit is not None:
          self.network_traffic_limit = network_traffic_limit

    @property
    def host_id(self):
        """
        Gets the host_id of this Host.
        Internal host ID from vendor used to identify host in inventory

        :return: The host_id of this Host.
        :rtype: str
        """
        return self._host_id

    @host_id.setter
    def host_id(self, host_id):
        """
        Sets the host_id of this Host.
        Internal host ID from vendor used to identify host in inventory

        :param host_id: The host_id of this Host.
        :type: str
        """

        self._host_id = host_id

    @property
    def host_type(self):
        """
        Gets the host_type of this Host.
        Type of host

        :return: The host_type of this Host.
        :rtype: str
        """
        return self._host_type

    @host_type.setter
    def host_type(self, host_type):
        """
        Sets the host_type of this Host.
        Type of host

        :param host_type: The host_type of this Host.
        :type: str
        """
        allowed_values = ["BARE_METAL", "CLOUD", "UNKNOWN"]
        if host_type not in allowed_values:
            raise ValueError(
                "Invalid value for `host_type` ({0}), must be one of {1}"
                .format(host_type, allowed_values)
            )

        self._host_type = host_type

    @property
    def host_model(self):
        """
        Gets the host_model of this Host.
        Host model or marketing name

        :return: The host_model of this Host.
        :rtype: str
        """
        return self._host_model

    @host_model.setter
    def host_model(self, host_model):
        """
        Sets the host_model of this Host.
        Host model or marketing name

        :param host_model: The host_model of this Host.
        :type: str
        """

        self._host_model = host_model

    @property
    def observation_id(self):
        """
        Gets the observation_id of this Host.
        Observation from which this host record was derived

        :return: The observation_id of this Host.
        :rtype: str
        """
        return self._observation_id

    @observation_id.setter
    def observation_id(self, observation_id):
        """
        Sets the observation_id of this Host.
        Observation from which this host record was derived

        :param observation_id: The observation_id of this Host.
        :type: str
        """

        self._observation_id = observation_id

    @property
    def resource_id(self):
        """
        Gets the resource_id of this Host.
        Inventory resource ID that can be related to invoice item resource ID

        :return: The resource_id of this Host.
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """
        Sets the resource_id of this Host.
        Inventory resource ID that can be related to invoice item resource ID

        :param resource_id: The resource_id of this Host.
        :type: str
        """

        self._resource_id = resource_id

    @property
    def effective_date(self):
        """
        Gets the effective_date of this Host.
        Invoice effective date

        :return: The effective_date of this Host.
        :rtype: datetime
        """
        return self._effective_date

    @effective_date.setter
    def effective_date(self, effective_date):
        """
        Sets the effective_date of this Host.
        Invoice effective date

        :param effective_date: The effective_date of this Host.
        :type: datetime
        """

        self._effective_date = effective_date

    @property
    def identifier(self):
        """
        Gets the identifier of this Host.
        Internal host identifier

        :return: The identifier of this Host.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """
        Sets the identifier of this Host.
        Internal host identifier

        :param identifier: The identifier of this Host.
        :type: str
        """

        self._identifier = identifier

    @property
    def vendor(self):
        """
        Gets the vendor of this Host.
        Vendor key

        :return: The vendor of this Host.
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """
        Sets the vendor of this Host.
        Vendor key

        :param vendor: The vendor of this Host.
        :type: str
        """

        self._vendor = vendor

    @property
    def region(self):
        """
        Gets the region of this Host.
        Geographic region

        :return: The region of this Host.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """
        Sets the region of this Host.
        Geographic region

        :param region: The region of this Host.
        :type: str
        """

        self._region = region

    @property
    def zone(self):
        """
        Gets the zone of this Host.
        Data center or availability zone within region

        :return: The zone of this Host.
        :rtype: str
        """
        return self._zone

    @zone.setter
    def zone(self, zone):
        """
        Sets the zone of this Host.
        Data center or availability zone within region

        :param zone: The zone of this Host.
        :type: str
        """

        self._zone = zone

    @property
    def cpu(self):
        """
        Gets the cpu of this Host.
        CPU model

        :return: The cpu of this Host.
        :rtype: str
        """
        return self._cpu

    @cpu.setter
    def cpu(self, cpu):
        """
        Sets the cpu of this Host.
        CPU model

        :param cpu: The cpu of this Host.
        :type: str
        """

        self._cpu = cpu

    @property
    def socket_count(self):
        """
        Gets the socket_count of this Host.
        Number of CPU sockets

        :return: The socket_count of this Host.
        :rtype: int
        """
        return self._socket_count

    @socket_count.setter
    def socket_count(self, socket_count):
        """
        Sets the socket_count of this Host.
        Number of CPU sockets

        :param socket_count: The socket_count of this Host.
        :type: int
        """

        self._socket_count = socket_count

    @property
    def core_count(self):
        """
        Gets the core_count of this Host.
        Number of cores per socket

        :return: The core_count of this Host.
        :rtype: int
        """
        return self._core_count

    @core_count.setter
    def core_count(self, core_count):
        """
        Sets the core_count of this Host.
        Number of cores per socket

        :param core_count: The core_count of this Host.
        :type: int
        """

        self._core_count = core_count

    @property
    def ram(self):
        """
        Gets the ram of this Host.
        Size of RAM in bytes

        :return: The ram of this Host.
        :rtype: int
        """
        return self._ram

    @ram.setter
    def ram(self, ram):
        """
        Sets the ram of this Host.
        Size of RAM in bytes

        :param ram: The ram of this Host.
        :type: int
        """

        self._ram = ram

    @property
    def hdd(self):
        """
        Gets the hdd of this Host.
        Size of HDD storage in bytes

        :return: The hdd of this Host.
        :rtype: int
        """
        return self._hdd

    @hdd.setter
    def hdd(self, hdd):
        """
        Sets the hdd of this Host.
        Size of HDD storage in bytes

        :param hdd: The hdd of this Host.
        :type: int
        """

        self._hdd = hdd

    @property
    def ssd(self):
        """
        Gets the ssd of this Host.
        Size of SSD storage in bytes

        :return: The ssd of this Host.
        :rtype: int
        """
        return self._ssd

    @ssd.setter
    def ssd(self, ssd):
        """
        Sets the ssd of this Host.
        Size of SSD storage in bytes

        :param ssd: The ssd of this Host.
        :type: int
        """

        self._ssd = ssd

    @property
    def nic_count(self):
        """
        Gets the nic_count of this Host.
        Number of network interface cards (NICs)

        :return: The nic_count of this Host.
        :rtype: int
        """
        return self._nic_count

    @nic_count.setter
    def nic_count(self, nic_count):
        """
        Sets the nic_count of this Host.
        Number of network interface cards (NICs)

        :param nic_count: The nic_count of this Host.
        :type: int
        """

        self._nic_count = nic_count

    @property
    def network_traffic_limit(self):
        """
        Gets the network_traffic_limit of this Host.
        Number of bytes of network traffer per billing period if there is a hard limit

        :return: The network_traffic_limit of this Host.
        :rtype: int
        """
        return self._network_traffic_limit

    @network_traffic_limit.setter
    def network_traffic_limit(self, network_traffic_limit):
        """
        Sets the network_traffic_limit of this Host.
        Number of bytes of network traffer per billing period if there is a hard limit

        :param network_traffic_limit: The network_traffic_limit of this Host.
        :type: int
        """

        self._network_traffic_limit = network_traffic_limit

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Host):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
