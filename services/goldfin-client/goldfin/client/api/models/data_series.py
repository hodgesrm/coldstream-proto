# coding: utf-8

"""
    Goldfin Service API

    REST API for Goldfin Intelligent Invoice Processing

    OpenAPI spec version: 1.0.0
    Contact: info@goldfin.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DataSeries(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'content_type': 'str',
        'content_length': 'float',
        'thumbprint': 'str',
        'locator': 'str',
        'state': 'str',
        'format': 'str',
        'tags': 'TagSet',
        'creation_date': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'content_type': 'contentType',
        'content_length': 'contentLength',
        'thumbprint': 'thumbprint',
        'locator': 'locator',
        'state': 'state',
        'format': 'format',
        'tags': 'tags',
        'creation_date': 'creationDate'
    }

    def __init__(self, id=None, name=None, description=None, content_type=None, content_length=None, thumbprint=None, locator=None, state=None, format=None, tags=None, creation_date=None):
        """
        DataSeries - a model defined in Swagger
        """

        self._id = None
        self._name = None
        self._description = None
        self._content_type = None
        self._content_length = None
        self._thumbprint = None
        self._locator = None
        self._state = None
        self._format = None
        self._tags = None
        self._creation_date = None

        if id is not None:
          self.id = id
        if name is not None:
          self.name = name
        if description is not None:
          self.description = description
        if content_type is not None:
          self.content_type = content_type
        if content_length is not None:
          self.content_length = content_length
        if thumbprint is not None:
          self.thumbprint = thumbprint
        if locator is not None:
          self.locator = locator
        if state is not None:
          self.state = state
        if format is not None:
          self.format = format
        if tags is not None:
          self.tags = tags
        if creation_date is not None:
          self.creation_date = creation_date

    @property
    def id(self):
        """
        Gets the id of this DataSeries.
        Series ID

        :return: The id of this DataSeries.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this DataSeries.
        Series ID

        :param id: The id of this DataSeries.
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this DataSeries.
        Name of the source file if known

        :return: The name of this DataSeries.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this DataSeries.
        Name of the source file if known

        :param name: The name of this DataSeries.
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this DataSeries.
        Optional description of the series

        :return: The description of this DataSeries.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this DataSeries.
        Optional description of the series

        :param description: The description of this DataSeries.
        :type: str
        """

        self._description = description

    @property
    def content_type(self):
        """
        Gets the content_type of this DataSeries.
        Internet media type (e.g., application/json)

        :return: The content_type of this DataSeries.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """
        Sets the content_type of this DataSeries.
        Internet media type (e.g., application/json)

        :param content_type: The content_type of this DataSeries.
        :type: str
        """

        self._content_type = content_type

    @property
    def content_length(self):
        """
        Gets the content_length of this DataSeries.
        Content length in bytes

        :return: The content_length of this DataSeries.
        :rtype: float
        """
        return self._content_length

    @content_length.setter
    def content_length(self, content_length):
        """
        Sets the content_length of this DataSeries.
        Content length in bytes

        :param content_length: The content_length of this DataSeries.
        :type: float
        """

        self._content_length = content_length

    @property
    def thumbprint(self):
        """
        Gets the thumbprint of this DataSeries.
        SHA-256 thumbprint of content

        :return: The thumbprint of this DataSeries.
        :rtype: str
        """
        return self._thumbprint

    @thumbprint.setter
    def thumbprint(self, thumbprint):
        """
        Sets the thumbprint of this DataSeries.
        SHA-256 thumbprint of content

        :param thumbprint: The thumbprint of this DataSeries.
        :type: str
        """

        self._thumbprint = thumbprint

    @property
    def locator(self):
        """
        Gets the locator of this DataSeries.
        Storage locator for content

        :return: The locator of this DataSeries.
        :rtype: str
        """
        return self._locator

    @locator.setter
    def locator(self, locator):
        """
        Sets the locator of this DataSeries.
        Storage locator for content

        :param locator: The locator of this DataSeries.
        :type: str
        """

        self._locator = locator

    @property
    def state(self):
        """
        Gets the state of this DataSeries.
        The current processing state of the content.  

        :return: The state of this DataSeries.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this DataSeries.
        The current processing state of the content.  

        :param state: The state of this DataSeries.
        :type: str
        """
        allowed_values = ["CREATED", "PROCESS_REQUESTED", "PROCESSED", "ERROR"]
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def format(self):
        """
        Gets the format of this DataSeries.
        Kind of data series, e.g., observation

        :return: The format of this DataSeries.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """
        Sets the format of this DataSeries.
        Kind of data series, e.g., observation

        :param format: The format of this DataSeries.
        :type: str
        """
        allowed_values = ["OBSERVATION", "UNKNOWN"]
        if format not in allowed_values:
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"
                .format(format, allowed_values)
            )

        self._format = format

    @property
    def tags(self):
        """
        Gets the tags of this DataSeries.

        :return: The tags of this DataSeries.
        :rtype: TagSet
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this DataSeries.

        :param tags: The tags of this DataSeries.
        :type: TagSet
        """

        self._tags = tags

    @property
    def creation_date(self):
        """
        Gets the creation_date of this DataSeries.
        Date data was uploaded

        :return: The creation_date of this DataSeries.
        :rtype: str
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """
        Sets the creation_date of this DataSeries.
        Date data was uploaded

        :param creation_date: The creation_date of this DataSeries.
        :type: str
        """

        self._creation_date = creation_date

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DataSeries):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
