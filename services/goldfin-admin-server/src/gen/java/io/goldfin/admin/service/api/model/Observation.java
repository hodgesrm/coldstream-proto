/*
 * Goldfin Service API
 * REST API for Goldfin Intelligent Invoice Processing
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@goldfin.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.goldfin.admin.service.api.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.Date;
import javax.validation.constraints.*;

/**
 * Generic observation data related to a vendor offering
 */
@ApiModel(description = "Generic observation data related to a vendor offering")

public class Observation   {
  @JsonProperty("vendorIdentifier")
  private String vendorIdentifier = null;

  @JsonProperty("effectiveDate")
  private Date effectiveDate = null;

  @JsonProperty("description")
  private String description = null;

  /**
   * Kind of observation, e.g., host inventory.
   */
  public enum ObservationTypeEnum {
    INVENTORY("HOST_INVENTORY");

    private String value;

    ObservationTypeEnum(String value) {
      this.value = value;
    }

    @Override
    @JsonValue
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ObservationTypeEnum fromValue(String text) {
      for (ObservationTypeEnum b : ObservationTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("observationType")
  private ObservationTypeEnum observationType = null;

  @JsonProperty("data")
  private String data = null;

  @JsonProperty("version")
  private String version = null;

  public Observation vendorIdentifier(String vendorIdentifier) {
    this.vendorIdentifier = vendorIdentifier;
    return this;
  }

  /**
   * Vendor identifier key
   * @return vendorIdentifier
   **/
  @JsonProperty("vendorIdentifier")
  @ApiModelProperty(value = "Vendor identifier key")
  public String getVendorIdentifier() {
    return vendorIdentifier;
  }

  public void setVendorIdentifier(String vendorIdentifier) {
    this.vendorIdentifier = vendorIdentifier;
  }

  public Observation effectiveDate(Date effectiveDate) {
    this.effectiveDate = effectiveDate;
    return this;
  }

  /**
   * Effective date when observation was made
   * @return effectiveDate
   **/
  @JsonProperty("effectiveDate")
  @ApiModelProperty(value = "Effective date when observation was made")
  public Date getEffectiveDate() {
    return effectiveDate;
  }

  public void setEffectiveDate(Date effectiveDate) {
    this.effectiveDate = effectiveDate;
  }

  public Observation description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Optional description of observation
   * @return description
   **/
  @JsonProperty("description")
  @ApiModelProperty(value = "Optional description of observation")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public Observation observationType(ObservationTypeEnum observationType) {
    this.observationType = observationType;
    return this;
  }

  /**
   * Kind of observation, e.g., host inventory.
   * @return observationType
   **/
  @JsonProperty("observationType")
  @ApiModelProperty(value = "Kind of observation, e.g., host inventory.")
  public ObservationTypeEnum getObservationType() {
    return observationType;
  }

  public void setObservationType(ObservationTypeEnum observationType) {
    this.observationType = observationType;
  }

  public Observation data(String data) {
    this.data = data;
    return this;
  }

  /**
   * String containing serialized observation data
   * @return data
   **/
  @JsonProperty("data")
  @ApiModelProperty(value = "String containing serialized observation data")
  public String getData() {
    return data;
  }

  public void setData(String data) {
    this.data = data;
  }

  public Observation version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Data format version
   * @return version
   **/
  @JsonProperty("version")
  @ApiModelProperty(value = "Data format version")
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Observation observation = (Observation) o;
    return Objects.equals(this.vendorIdentifier, observation.vendorIdentifier) &&
        Objects.equals(this.effectiveDate, observation.effectiveDate) &&
        Objects.equals(this.description, observation.description) &&
        Objects.equals(this.observationType, observation.observationType) &&
        Objects.equals(this.data, observation.data) &&
        Objects.equals(this.version, observation.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(vendorIdentifier, effectiveDate, description, observationType, data, version);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Observation {\n");
    
    sb.append("    vendorIdentifier: ").append(toIndentedString(vendorIdentifier)).append("\n");
    sb.append("    effectiveDate: ").append(toIndentedString(effectiveDate)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    observationType: ").append(toIndentedString(observationType)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

