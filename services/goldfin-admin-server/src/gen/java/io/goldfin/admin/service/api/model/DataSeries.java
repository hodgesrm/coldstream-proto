/*
 * Goldfin Service API
 * REST API for Goldfin Intelligent Invoice Processing
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@goldfin.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.goldfin.admin.service.api.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import java.util.UUID;
import javax.validation.constraints.*;

/**
 * A set of one or more observations for analysis
 */
@ApiModel(description = "A set of one or more observations for analysis")

public class DataSeries   {
  @JsonProperty("id")
  private UUID id = null;

  @JsonProperty("name")
  private String name = null;

  @JsonProperty("description")
  private String description = null;

  @JsonProperty("contentType")
  private String contentType = null;

  @JsonProperty("contentLength")
  private BigDecimal contentLength = null;

  @JsonProperty("thumbprint")
  private String thumbprint = null;

  @JsonProperty("locator")
  private String locator = null;

  /**
   * The current processing state of the content.  
   */
  public enum StateEnum {
    CREATED("CREATED"),
    
    PROCESS_REQUESTED("PROCESS_REQUESTED"),
    
    PROCESSED("PROCESSED"),
    
    ERROR("ERROR");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    @Override
    @JsonValue
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StateEnum fromValue(String text) {
      for (StateEnum b : StateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("state")
  private StateEnum state = null;

  /**
   * Kind of data series, e.g., observation
   */
  public enum FormatEnum {
    OBSERVATION("OBSERVATION"),
    
    UNKNOWN("UNKNOWN");

    private String value;

    FormatEnum(String value) {
      this.value = value;
    }

    @Override
    @JsonValue
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static FormatEnum fromValue(String text) {
      for (FormatEnum b : FormatEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("format")
  private FormatEnum format = null;

  @JsonProperty("creationDate")
  private String creationDate = null;

  public DataSeries id(UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Series ID
   * @return id
   **/
  @JsonProperty("id")
  @ApiModelProperty(value = "Series ID")
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }

  public DataSeries name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the source file if known
   * @return name
   **/
  @JsonProperty("name")
  @ApiModelProperty(value = "Name of the source file if known")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public DataSeries description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Optional description of the series
   * @return description
   **/
  @JsonProperty("description")
  @ApiModelProperty(value = "Optional description of the series")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public DataSeries contentType(String contentType) {
    this.contentType = contentType;
    return this;
  }

  /**
   * Internet media type (e.g., application/json)
   * @return contentType
   **/
  @JsonProperty("contentType")
  @ApiModelProperty(value = "Internet media type (e.g., application/json)")
  public String getContentType() {
    return contentType;
  }

  public void setContentType(String contentType) {
    this.contentType = contentType;
  }

  public DataSeries contentLength(BigDecimal contentLength) {
    this.contentLength = contentLength;
    return this;
  }

  /**
   * Content length in bytes
   * @return contentLength
   **/
  @JsonProperty("contentLength")
  @ApiModelProperty(value = "Content length in bytes")
  public BigDecimal getContentLength() {
    return contentLength;
  }

  public void setContentLength(BigDecimal contentLength) {
    this.contentLength = contentLength;
  }

  public DataSeries thumbprint(String thumbprint) {
    this.thumbprint = thumbprint;
    return this;
  }

  /**
   * SHA-256 thumbprint of content
   * @return thumbprint
   **/
  @JsonProperty("thumbprint")
  @ApiModelProperty(value = "SHA-256 thumbprint of content")
  public String getThumbprint() {
    return thumbprint;
  }

  public void setThumbprint(String thumbprint) {
    this.thumbprint = thumbprint;
  }

  public DataSeries locator(String locator) {
    this.locator = locator;
    return this;
  }

  /**
   * Storage locator for content
   * @return locator
   **/
  @JsonProperty("locator")
  @ApiModelProperty(value = "Storage locator for content")
  public String getLocator() {
    return locator;
  }

  public void setLocator(String locator) {
    this.locator = locator;
  }

  public DataSeries state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * The current processing state of the content.  
   * @return state
   **/
  @JsonProperty("state")
  @ApiModelProperty(value = "The current processing state of the content.  ")
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }

  public DataSeries format(FormatEnum format) {
    this.format = format;
    return this;
  }

  /**
   * Kind of data series, e.g., observation
   * @return format
   **/
  @JsonProperty("format")
  @ApiModelProperty(value = "Kind of data series, e.g., observation")
  public FormatEnum getFormat() {
    return format;
  }

  public void setFormat(FormatEnum format) {
    this.format = format;
  }

  public DataSeries creationDate(String creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   * Date data was uploaded
   * @return creationDate
   **/
  @JsonProperty("creationDate")
  @ApiModelProperty(value = "Date data was uploaded")
  public String getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(String creationDate) {
    this.creationDate = creationDate;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataSeries dataSeries = (DataSeries) o;
    return Objects.equals(this.id, dataSeries.id) &&
        Objects.equals(this.name, dataSeries.name) &&
        Objects.equals(this.description, dataSeries.description) &&
        Objects.equals(this.contentType, dataSeries.contentType) &&
        Objects.equals(this.contentLength, dataSeries.contentLength) &&
        Objects.equals(this.thumbprint, dataSeries.thumbprint) &&
        Objects.equals(this.locator, dataSeries.locator) &&
        Objects.equals(this.state, dataSeries.state) &&
        Objects.equals(this.format, dataSeries.format) &&
        Objects.equals(this.creationDate, dataSeries.creationDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, description, contentType, contentLength, thumbprint, locator, state, format, creationDate);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataSeries {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    contentLength: ").append(toIndentedString(contentLength)).append("\n");
    sb.append("    thumbprint: ").append(toIndentedString(thumbprint)).append("\n");
    sb.append("    locator: ").append(toIndentedString(locator)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

