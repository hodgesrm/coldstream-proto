/**
 * Goldfin Service API
 * REST API for Goldfin Intelligent Invoice Processing
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@goldfin.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { ApiResponse } from '../model/apiResponse';
import { DataSeries } from '../model/dataSeries';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class DataService {

    protected basePath = 'https://api.goldfin.io/api/v1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Upload data series
     * Upload data series in a file for analysis
     * @param file Data series content
     * @param description An optional description of the data series
     * @param tags Optional tags that apply to this entity passed as a JSON string containing name-value pairs.
     * @param process Optional flag to kick off processing automatically if true
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public dataCreate(file: Blob, description?: string, tags?: string, process?: boolean, observe?: 'body', reportProgress?: boolean): Observable<DataSeries>;
    public dataCreate(file: Blob, description?: string, tags?: string, process?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DataSeries>>;
    public dataCreate(file: Blob, description?: string, tags?: string, process?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DataSeries>>;
    public dataCreate(file: Blob, description?: string, tags?: string, process?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (file === null || file === undefined) {
            throw new Error('Required parameter file was null or undefined when calling dataCreate.');
        }

        let headers = this.defaultHeaders;

        // authentication (ApiKey) required
        if (this.configuration.apiKeys["vnd.io.goldfin.apikey"]) {
            headers = headers.set('vnd.io.goldfin.apikey', this.configuration.apiKeys["vnd.io.goldfin.apikey"]);
        }

        // authentication (SessionKey) required
        if (this.configuration.apiKeys["vnd.io.goldfin.session"]) {
            headers = headers.set('vnd.io.goldfin.session', this.configuration.apiKeys["vnd.io.goldfin.session"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (description !== undefined) {
            formParams = formParams.append('description', <any>description) || formParams;
        }
        if (tags !== undefined) {
            formParams = formParams.append('tags', <any>tags) || formParams;
        }
        if (process !== undefined) {
            formParams = formParams.append('process', <any>process) || formParams;
        }
        if (file !== undefined) {
            formParams = formParams.append('file', <any>file) || formParams;
        }

        return this.httpClient.post<DataSeries>(`${this.basePath}/data`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete a data series
     * Delete a data series and any derived information
     * @param id Series ID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public dataDelete(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public dataDelete(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public dataDelete(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public dataDelete(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling dataDelete.');
        }

        let headers = this.defaultHeaders;

        // authentication (ApiKey) required
        if (this.configuration.apiKeys["vnd.io.goldfin.apikey"]) {
            headers = headers.set('vnd.io.goldfin.apikey', this.configuration.apiKeys["vnd.io.goldfin.apikey"]);
        }

        // authentication (SessionKey) required
        if (this.configuration.apiKeys["vnd.io.goldfin.session"]) {
            headers = headers.set('vnd.io.goldfin.session', this.configuration.apiKeys["vnd.io.goldfin.session"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/data/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Kick off background processing of data series
     * Run background processing of data series, which may generate one or more inventory records.
     * @param id Series ID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public dataProcess(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public dataProcess(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public dataProcess(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public dataProcess(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling dataProcess.');
        }

        let headers = this.defaultHeaders;

        // authentication (ApiKey) required
        if (this.configuration.apiKeys["vnd.io.goldfin.apikey"]) {
            headers = headers.set('vnd.io.goldfin.apikey', this.configuration.apiKeys["vnd.io.goldfin.apikey"]);
        }

        // authentication (SessionKey) required
        if (this.configuration.apiKeys["vnd.io.goldfin.session"]) {
            headers = headers.set('vnd.io.goldfin.session', this.configuration.apiKeys["vnd.io.goldfin.session"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/data/${encodeURIComponent(String(id))}/process`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Return data series metadata
     * Download data series metadata without content
     * @param id Series ID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public dataShow(id: string, observe?: 'body', reportProgress?: boolean): Observable<DataSeries>;
    public dataShow(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DataSeries>>;
    public dataShow(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DataSeries>>;
    public dataShow(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling dataShow.');
        }

        let headers = this.defaultHeaders;

        // authentication (ApiKey) required
        if (this.configuration.apiKeys["vnd.io.goldfin.apikey"]) {
            headers = headers.set('vnd.io.goldfin.apikey', this.configuration.apiKeys["vnd.io.goldfin.apikey"]);
        }

        // authentication (SessionKey) required
        if (this.configuration.apiKeys["vnd.io.goldfin.session"]) {
            headers = headers.set('vnd.io.goldfin.session', this.configuration.apiKeys["vnd.io.goldfin.session"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<DataSeries>(`${this.basePath}/data/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * List data serties
     * Return a list of metadata entries for all data series
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public dataShowAll(observe?: 'body', reportProgress?: boolean): Observable<Array<DataSeries>>;
    public dataShowAll(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<DataSeries>>>;
    public dataShowAll(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<DataSeries>>>;
    public dataShowAll(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (ApiKey) required
        if (this.configuration.apiKeys["vnd.io.goldfin.apikey"]) {
            headers = headers.set('vnd.io.goldfin.apikey', this.configuration.apiKeys["vnd.io.goldfin.apikey"]);
        }

        // authentication (SessionKey) required
        if (this.configuration.apiKeys["vnd.io.goldfin.session"]) {
            headers = headers.set('vnd.io.goldfin.session', this.configuration.apiKeys["vnd.io.goldfin.session"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<Array<DataSeries>>(`${this.basePath}/data`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Return data series content
     * Download data series content
     * @param id Series ID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public dataShowContent(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public dataShowContent(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public dataShowContent(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public dataShowContent(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling dataShowContent.');
        }

        let headers = this.defaultHeaders;

        // authentication (ApiKey) required
        if (this.configuration.apiKeys["vnd.io.goldfin.apikey"]) {
            headers = headers.set('vnd.io.goldfin.apikey', this.configuration.apiKeys["vnd.io.goldfin.apikey"]);
        }

        // authentication (SessionKey) required
        if (this.configuration.apiKeys["vnd.io.goldfin.session"]) {
            headers = headers.set('vnd.io.goldfin.session', this.configuration.apiKeys["vnd.io.goldfin.session"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/octet-stream'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/data/${encodeURIComponent(String(id))}/content`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update a data series
     * Update data series description and/or tags.  Other fields are ignored if included in the body.
     * @param id Data series ID
     * @param body Data series parameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public dataUpdate(id: string, body?: DataSeries, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public dataUpdate(id: string, body?: DataSeries, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public dataUpdate(id: string, body?: DataSeries, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public dataUpdate(id: string, body?: DataSeries, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling dataUpdate.');
        }

        let headers = this.defaultHeaders;

        // authentication (ApiKey) required
        if (this.configuration.apiKeys["vnd.io.goldfin.apikey"]) {
            headers = headers.set('vnd.io.goldfin.apikey', this.configuration.apiKeys["vnd.io.goldfin.apikey"]);
        }

        // authentication (SessionKey) required
        if (this.configuration.apiKeys["vnd.io.goldfin.session"]) {
            headers = headers.set('vnd.io.goldfin.session', this.configuration.apiKeys["vnd.io.goldfin.session"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/data/${encodeURIComponent(String(id))}`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
