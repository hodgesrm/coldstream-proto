/**
 * Goldfin Service API
 * REST API for Goldfin Intelligent Invoice Processing
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@goldfin.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ExtractApi {

    protected basePath = 'https://api.goldfin.io/api/v1';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

    /**
     * Extract data for a particular extract type, where these correspond to schema types as well as  reports that join data from multiple schema types
     * @summary Download a data extract
     * @param extractType Name of the extract type
     * @param filter A query string that specifies extract content.  If omitted all entities are selected.
     * @param output Selects the extract output type. Currently only CSV is supported.
     */
    public extractDownload(extractType: string, filter?: string, output?: string, extraHttpRequestParams?: any): Observable<any> {
        return this.extractDownloadWithHttpInfo(extractType, filter, output, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Return a list of available extrac types
     * @summary List available extract types
     */
    public extractTypes(extraHttpRequestParams?: any): Observable<Array<string>> {
        return this.extractTypesWithHttpInfo(extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }


    /**
     * Download a data extract
     * Extract data for a particular extract type, where these correspond to schema types as well as  reports that join data from multiple schema types
     * @param extractType Name of the extract type
     * @param filter A query string that specifies extract content.  If omitted all entities are selected.
     * @param output Selects the extract output type. Currently only CSV is supported.
     */
    public extractDownloadWithHttpInfo(extractType: string, filter?: string, output?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/extract/download';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'extractType' is not null or undefined
        if (extractType === null || extractType === undefined) {
            throw new Error('Required parameter extractType was null or undefined when calling extractDownload.');
        }
        if (extractType !== undefined) {
            queryParameters.set('extractType', <any>extractType);
        }

        if (filter !== undefined) {
            queryParameters.set('filter', <any>filter);
        }

        if (output !== undefined) {
            queryParameters.set('output', <any>output);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/csv',
            'text/json'
        ];

        // authentication (APIKeyHeader) required
        if (this.configuration.apiKey) {
            headers.set('vnd.io.goldfin.session', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * List available extract types
     * Return a list of available extrac types
     */
    public extractTypesWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/extract/types';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (APIKeyHeader) required
        if (this.configuration.apiKey) {
            headers.set('vnd.io.goldfin.session', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
