# coding: utf-8

"""
    Goldfin Service Admin API

    REST API for Goldfin Service Administration

    OpenAPI spec version: 1.0.0
    Contact: info@goldfin.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class UserParameters(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tenant_id': 'str',
        'username': 'str',
        'initial_password': 'str',
        'roles': 'str'
    }

    attribute_map = {
        'tenant_id': 'tenantId',
        'username': 'username',
        'initial_password': 'initialPassword',
        'roles': 'roles'
    }

    def __init__(self, tenant_id=None, username=None, initial_password=None, roles=None):
        """
        UserParameters - a model defined in Swagger
        """

        self._tenant_id = None
        self._username = None
        self._initial_password = None
        self._roles = None

        if tenant_id is not None:
          self.tenant_id = tenant_id
        if username is not None:
          self.username = username
        if initial_password is not None:
          self.initial_password = initial_password
        if roles is not None:
          self.roles = roles

    @property
    def tenant_id(self):
        """
        Gets the tenant_id of this UserParameters.
        Tenant ID, cannot be changed after creation

        :return: The tenant_id of this UserParameters.
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """
        Sets the tenant_id of this UserParameters.
        Tenant ID, cannot be changed after creation

        :param tenant_id: The tenant_id of this UserParameters.
        :type: str
        """

        self._tenant_id = tenant_id

    @property
    def username(self):
        """
        Gets the username of this UserParameters.
        Unique user name

        :return: The username of this UserParameters.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """
        Sets the username of this UserParameters.
        Unique user name

        :param username: The username of this UserParameters.
        :type: str
        """

        self._username = username

    @property
    def initial_password(self):
        """
        Gets the initial_password of this UserParameters.
        Initial user password; ignored after creation

        :return: The initial_password of this UserParameters.
        :rtype: str
        """
        return self._initial_password

    @initial_password.setter
    def initial_password(self, initial_password):
        """
        Sets the initial_password of this UserParameters.
        Initial user password; ignored after creation

        :param initial_password: The initial_password of this UserParameters.
        :type: str
        """

        self._initial_password = initial_password

    @property
    def roles(self):
        """
        Gets the roles of this UserParameters.
        Comma-separated list of user roles

        :return: The roles of this UserParameters.
        :rtype: str
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """
        Sets the roles of this UserParameters.
        Comma-separated list of user roles

        :param roles: The roles of this UserParameters.
        :type: str
        """

        self._roles = roles

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, UserParameters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
