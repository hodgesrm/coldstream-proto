# coding: utf-8

"""
    Goldfin Service API

    REST API for Goldfin Intelligent Invoice Processing

    OpenAPI spec version: 1.0.0
    Contact: info@goldfin.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InvoiceValidationResult(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'summary': 'str',
        'passed': 'bool',
        'validation_type': 'str',
        'details': 'str',
        'invoice_id': 'str',
        'identifier': 'str',
        'effective_date': 'datetime',
        'vendor_identifier': 'str',
        'invoice_item_id': 'str',
        'invoice_item_resource_id': 'str'
    }

    attribute_map = {
        'summary': 'summary',
        'passed': 'passed',
        'validation_type': 'validationType',
        'details': 'details',
        'invoice_id': 'invoiceId',
        'identifier': 'identifier',
        'effective_date': 'effectiveDate',
        'vendor_identifier': 'vendorIdentifier',
        'invoice_item_id': 'invoiceItemId',
        'invoice_item_resource_id': 'invoiceItemResourceId'
    }

    def __init__(self, summary=None, passed=None, validation_type=None, details=None, invoice_id=None, identifier=None, effective_date=None, vendor_identifier=None, invoice_item_id=None, invoice_item_resource_id=None):
        """
        InvoiceValidationResult - a model defined in Swagger
        """

        self._summary = None
        self._passed = None
        self._validation_type = None
        self._details = None
        self._invoice_id = None
        self._identifier = None
        self._effective_date = None
        self._vendor_identifier = None
        self._invoice_item_id = None
        self._invoice_item_resource_id = None

        if summary is not None:
          self.summary = summary
        if passed is not None:
          self.passed = passed
        if validation_type is not None:
          self.validation_type = validation_type
        if details is not None:
          self.details = details
        if invoice_id is not None:
          self.invoice_id = invoice_id
        if identifier is not None:
          self.identifier = identifier
        if effective_date is not None:
          self.effective_date = effective_date
        if vendor_identifier is not None:
          self.vendor_identifier = vendor_identifier
        if invoice_item_id is not None:
          self.invoice_item_id = invoice_item_id
        if invoice_item_resource_id is not None:
          self.invoice_item_resource_id = invoice_item_resource_id

    @property
    def summary(self):
        """
        Gets the summary of this InvoiceValidationResult.
        A concise summary of the check

        :return: The summary of this InvoiceValidationResult.
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """
        Sets the summary of this InvoiceValidationResult.
        A concise summary of the check

        :param summary: The summary of this InvoiceValidationResult.
        :type: str
        """

        self._summary = summary

    @property
    def passed(self):
        """
        Gets the passed of this InvoiceValidationResult.
        If true the check passed

        :return: The passed of this InvoiceValidationResult.
        :rtype: bool
        """
        return self._passed

    @passed.setter
    def passed(self, passed):
        """
        Sets the passed of this InvoiceValidationResult.
        If true the check passed

        :param passed: The passed of this InvoiceValidationResult.
        :type: bool
        """

        self._passed = passed

    @property
    def validation_type(self):
        """
        Gets the validation_type of this InvoiceValidationResult.
        The type of validation, which can be related to the invoice itself or an invoice line item.  In the latter case line item fields are included; otherwise line item information is omitted.

        :return: The validation_type of this InvoiceValidationResult.
        :rtype: str
        """
        return self._validation_type

    @validation_type.setter
    def validation_type(self, validation_type):
        """
        Sets the validation_type of this InvoiceValidationResult.
        The type of validation, which can be related to the invoice itself or an invoice line item.  In the latter case line item fields are included; otherwise line item information is omitted.

        :param validation_type: The validation_type of this InvoiceValidationResult.
        :type: str
        """
        allowed_values = ["INVOICE", "INVOICE_LINE_ITEM"]
        if validation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `validation_type` ({0}), must be one of {1}"
                .format(validation_type, allowed_values)
            )

        self._validation_type = validation_type

    @property
    def details(self):
        """
        Gets the details of this InvoiceValidationResult.
        Detailed information about the exception

        :return: The details of this InvoiceValidationResult.
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """
        Sets the details of this InvoiceValidationResult.
        Detailed information about the exception

        :param details: The details of this InvoiceValidationResult.
        :type: str
        """

        self._details = details

    @property
    def invoice_id(self):
        """
        Gets the invoice_id of this InvoiceValidationResult.
        ID of invoice to which discrepancy applies

        :return: The invoice_id of this InvoiceValidationResult.
        :rtype: str
        """
        return self._invoice_id

    @invoice_id.setter
    def invoice_id(self, invoice_id):
        """
        Sets the invoice_id of this InvoiceValidationResult.
        ID of invoice to which discrepancy applies

        :param invoice_id: The invoice_id of this InvoiceValidationResult.
        :type: str
        """

        self._invoice_id = invoice_id

    @property
    def identifier(self):
        """
        Gets the identifier of this InvoiceValidationResult.
        Invoice identifier

        :return: The identifier of this InvoiceValidationResult.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """
        Sets the identifier of this InvoiceValidationResult.
        Invoice identifier

        :param identifier: The identifier of this InvoiceValidationResult.
        :type: str
        """

        self._identifier = identifier

    @property
    def effective_date(self):
        """
        Gets the effective_date of this InvoiceValidationResult.
        Invoice effective date

        :return: The effective_date of this InvoiceValidationResult.
        :rtype: datetime
        """
        return self._effective_date

    @effective_date.setter
    def effective_date(self, effective_date):
        """
        Sets the effective_date of this InvoiceValidationResult.
        Invoice effective date

        :param effective_date: The effective_date of this InvoiceValidationResult.
        :type: datetime
        """

        self._effective_date = effective_date

    @property
    def vendor_identifier(self):
        """
        Gets the vendor_identifier of this InvoiceValidationResult.
        Vendor identifier

        :return: The vendor_identifier of this InvoiceValidationResult.
        :rtype: str
        """
        return self._vendor_identifier

    @vendor_identifier.setter
    def vendor_identifier(self, vendor_identifier):
        """
        Sets the vendor_identifier of this InvoiceValidationResult.
        Vendor identifier

        :param vendor_identifier: The vendor_identifier of this InvoiceValidationResult.
        :type: str
        """

        self._vendor_identifier = vendor_identifier

    @property
    def invoice_item_id(self):
        """
        Gets the invoice_item_id of this InvoiceValidationResult.
        Invoice line item ID

        :return: The invoice_item_id of this InvoiceValidationResult.
        :rtype: str
        """
        return self._invoice_item_id

    @invoice_item_id.setter
    def invoice_item_id(self, invoice_item_id):
        """
        Sets the invoice_item_id of this InvoiceValidationResult.
        Invoice line item ID

        :param invoice_item_id: The invoice_item_id of this InvoiceValidationResult.
        :type: str
        """

        self._invoice_item_id = invoice_item_id

    @property
    def invoice_item_resource_id(self):
        """
        Gets the invoice_item_resource_id of this InvoiceValidationResult.
        Invoice line item inventory resource ID

        :return: The invoice_item_resource_id of this InvoiceValidationResult.
        :rtype: str
        """
        return self._invoice_item_resource_id

    @invoice_item_resource_id.setter
    def invoice_item_resource_id(self, invoice_item_resource_id):
        """
        Sets the invoice_item_resource_id of this InvoiceValidationResult.
        Invoice line item inventory resource ID

        :param invoice_item_resource_id: The invoice_item_resource_id of this InvoiceValidationResult.
        :type: str
        """

        self._invoice_item_resource_id = invoice_item_resource_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InvoiceValidationResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
