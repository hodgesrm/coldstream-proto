# coding: utf-8

"""
    Goldfin Service API

    REST API for Goldfin Intelligent Invoice Processing

    OpenAPI spec version: 1.0.0
    Contact: info@goldfin.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InvoiceItem(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'item_id': 'str',
        'resource_id': 'str',
        'description': 'str',
        'unit_amount': 'float',
        'units': 'int',
        'total_amount': 'float',
        'currency': 'str',
        'start_date': 'datetime',
        'end_date': 'datetime',
        'one_time_charge': 'bool',
        'region': 'DocumentRegion',
        'inventory_id': 'str',
        'inventory_type': 'str',
        'tags': 'TagSet'
    }

    attribute_map = {
        'item_id': 'itemId',
        'resource_id': 'resourceId',
        'description': 'description',
        'unit_amount': 'unitAmount',
        'units': 'units',
        'total_amount': 'totalAmount',
        'currency': 'currency',
        'start_date': 'startDate',
        'end_date': 'endDate',
        'one_time_charge': 'oneTimeCharge',
        'region': 'region',
        'inventory_id': 'inventoryId',
        'inventory_type': 'inventoryType',
        'tags': 'tags'
    }

    def __init__(self, item_id=None, resource_id=None, description=None, unit_amount=None, units=None, total_amount=None, currency=None, start_date=None, end_date=None, one_time_charge=None, region=None, inventory_id=None, inventory_type=None, tags=None):
        """
        InvoiceItem - a model defined in Swagger
        """

        self._item_id = None
        self._resource_id = None
        self._description = None
        self._unit_amount = None
        self._units = None
        self._total_amount = None
        self._currency = None
        self._start_date = None
        self._end_date = None
        self._one_time_charge = None
        self._region = None
        self._inventory_id = None
        self._inventory_type = None
        self._tags = None

        if item_id is not None:
          self.item_id = item_id
        if resource_id is not None:
          self.resource_id = resource_id
        if description is not None:
          self.description = description
        if unit_amount is not None:
          self.unit_amount = unit_amount
        if units is not None:
          self.units = units
        if total_amount is not None:
          self.total_amount = total_amount
        if currency is not None:
          self.currency = currency
        if start_date is not None:
          self.start_date = start_date
        if end_date is not None:
          self.end_date = end_date
        if one_time_charge is not None:
          self.one_time_charge = one_time_charge
        if region is not None:
          self.region = region
        if inventory_id is not None:
          self.inventory_id = inventory_id
        if inventory_type is not None:
          self.inventory_type = inventory_type
        if tags is not None:
          self.tags = tags

    @property
    def item_id(self):
        """
        Gets the item_id of this InvoiceItem.
        Invoice item ID if specified

        :return: The item_id of this InvoiceItem.
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """
        Sets the item_id of this InvoiceItem.
        Invoice item ID if specified

        :param item_id: The item_id of this InvoiceItem.
        :type: str
        """

        self._item_id = item_id

    @property
    def resource_id(self):
        """
        Gets the resource_id of this InvoiceItem.
        Inventory resource ID

        :return: The resource_id of this InvoiceItem.
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """
        Sets the resource_id of this InvoiceItem.
        Inventory resource ID

        :param resource_id: The resource_id of this InvoiceItem.
        :type: str
        """

        self._resource_id = resource_id

    @property
    def description(self):
        """
        Gets the description of this InvoiceItem.
        Invoice item description

        :return: The description of this InvoiceItem.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this InvoiceItem.
        Invoice item description

        :param description: The description of this InvoiceItem.
        :type: str
        """

        self._description = description

    @property
    def unit_amount(self):
        """
        Gets the unit_amount of this InvoiceItem.
        Cost per unit

        :return: The unit_amount of this InvoiceItem.
        :rtype: float
        """
        return self._unit_amount

    @unit_amount.setter
    def unit_amount(self, unit_amount):
        """
        Sets the unit_amount of this InvoiceItem.
        Cost per unit

        :param unit_amount: The unit_amount of this InvoiceItem.
        :type: float
        """

        self._unit_amount = unit_amount

    @property
    def units(self):
        """
        Gets the units of this InvoiceItem.
        Number of units

        :return: The units of this InvoiceItem.
        :rtype: int
        """
        return self._units

    @units.setter
    def units(self, units):
        """
        Sets the units of this InvoiceItem.
        Number of units

        :param units: The units of this InvoiceItem.
        :type: int
        """

        self._units = units

    @property
    def total_amount(self):
        """
        Gets the total_amount of this InvoiceItem.
        Total cost for all units

        :return: The total_amount of this InvoiceItem.
        :rtype: float
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """
        Sets the total_amount of this InvoiceItem.
        Total cost for all units

        :param total_amount: The total_amount of this InvoiceItem.
        :type: float
        """

        self._total_amount = total_amount

    @property
    def currency(self):
        """
        Gets the currency of this InvoiceItem.
        Item currency

        :return: The currency of this InvoiceItem.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """
        Sets the currency of this InvoiceItem.
        Item currency

        :param currency: The currency of this InvoiceItem.
        :type: str
        """

        self._currency = currency

    @property
    def start_date(self):
        """
        Gets the start_date of this InvoiceItem.
        Begining of the time range

        :return: The start_date of this InvoiceItem.
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """
        Sets the start_date of this InvoiceItem.
        Begining of the time range

        :param start_date: The start_date of this InvoiceItem.
        :type: datetime
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """
        Gets the end_date of this InvoiceItem.
        End of the time range

        :return: The end_date of this InvoiceItem.
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """
        Sets the end_date of this InvoiceItem.
        End of the time range

        :param end_date: The end_date of this InvoiceItem.
        :type: datetime
        """

        self._end_date = end_date

    @property
    def one_time_charge(self):
        """
        Gets the one_time_charge of this InvoiceItem.
        If true, this is a one-time charge and the starting date provides the date

        :return: The one_time_charge of this InvoiceItem.
        :rtype: bool
        """
        return self._one_time_charge

    @one_time_charge.setter
    def one_time_charge(self, one_time_charge):
        """
        Sets the one_time_charge of this InvoiceItem.
        If true, this is a one-time charge and the starting date provides the date

        :param one_time_charge: The one_time_charge of this InvoiceItem.
        :type: bool
        """

        self._one_time_charge = one_time_charge

    @property
    def region(self):
        """
        Gets the region of this InvoiceItem.

        :return: The region of this InvoiceItem.
        :rtype: DocumentRegion
        """
        return self._region

    @region.setter
    def region(self, region):
        """
        Sets the region of this InvoiceItem.

        :param region: The region of this InvoiceItem.
        :type: DocumentRegion
        """

        self._region = region

    @property
    def inventory_id(self):
        """
        Gets the inventory_id of this InvoiceItem.
        Id of an inventory description

        :return: The inventory_id of this InvoiceItem.
        :rtype: str
        """
        return self._inventory_id

    @inventory_id.setter
    def inventory_id(self, inventory_id):
        """
        Sets the inventory_id of this InvoiceItem.
        Id of an inventory description

        :param inventory_id: The inventory_id of this InvoiceItem.
        :type: str
        """

        self._inventory_id = inventory_id

    @property
    def inventory_type(self):
        """
        Gets the inventory_type of this InvoiceItem.

        :return: The inventory_type of this InvoiceItem.
        :rtype: str
        """
        return self._inventory_type

    @inventory_type.setter
    def inventory_type(self, inventory_type):
        """
        Sets the inventory_type of this InvoiceItem.

        :param inventory_type: The inventory_type of this InvoiceItem.
        :type: str
        """
        allowed_values = ["HOST"]
        if inventory_type not in allowed_values:
            raise ValueError(
                "Invalid value for `inventory_type` ({0}), must be one of {1}"
                .format(inventory_type, allowed_values)
            )

        self._inventory_type = inventory_type

    @property
    def tags(self):
        """
        Gets the tags of this InvoiceItem.

        :return: The tags of this InvoiceItem.
        :rtype: TagSet
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this InvoiceItem.

        :param tags: The tags of this InvoiceItem.
        :type: TagSet
        """

        self._tags = tags

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InvoiceItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
