#!/usr/bin/env python3
# Copyright (c) 2018 Robert Hodges.  All rights reserved. 

import logging
import sys
import tempfile
import unittest
import uuid
import warnings
import yaml

import goldfin_ocr.s3 as s3

# Set log level. 
logging.basicConfig(filename="output.log", level=logging.DEBUG)

def get_s3_connection():
    """Allocate connection from configuration file"""
    with open("ocr-test.yaml", "r") as ocr_yaml:
        config = yaml.load(ocr_yaml)

    access_key_id = config['aws']['accessKeyId']
    secret_access_key = config['aws']['secretAccessKey']
    bucket = config['cache']['bucket']
    location = config['cache']['location']

    return s3.S3Connection(access_key_id=access_key_id, 
                secret_access_key=secret_access_key, 
                bucket=bucket,
                location=location,
                create_bucket=True)


class TestS3(unittest.TestCase):
    def setUp(self):
        """Suppress warnings generated by boto3 on Python 3.5"""
        if sys.version_info < (3,6):
            warnings.simplefilter("ignore", ResourceWarning)

    def test_s3_connection(self):
        """Show that we can connect and validate the connection"""
        with get_s3_connection() as my_s3:
            my_s3.validate()

    def test_s3_simple_lifecycle(self):
        """Show that we can upload and download objects using strings"""
        my_s3 = get_s3_connection()
        my_s3.validate()

        # Upload a string. 
        key = str(uuid.uuid4())
        meta = {'a': 'b'}
        my_s3.create(key, "test-value", metadata=meta)
        exists = my_s3.exists(key)
        self.assertTrue(exists)

        # Get it back. 
        value = my_s3.fetch(key)
        self.assertEqual("test-value", value)

        # Get the metadata as well. 
        meta2 = my_s3.fetch_metadata(key)
        self.assertEqual(meta, meta2)

        # Delete the value. 
        my_s3.delete(key)
        exists = my_s3.exists(key)
        self.assertFalse(exists)

    def test_s3_file_lifecycle(self):
        """Show that we can upload and download objects using files"""
        my_s3 = get_s3_connection()
        my_s3.validate()

        # Work with a temporary file. 
        key = str(uuid.uuid4())
        data = "test test test test test!"
        meta = {'name': 'tempfile.dat'}
        with tempfile.NamedTemporaryFile(delete=False) as mytemp:
            # Put in some data. 
            mytemp.write(data.encode('utf-8'))
            mytemp.flush()
            mytemp.seek(0)

            # Load the file. 
            path = mytemp.name
            my_s3.create_from_file(key, path, metadata=meta)

        # Ensure the value exists. 
        exists = my_s3.exists(key)
        self.assertTrue(exists)

        # Get the metadata as well. 
        meta2 = my_s3.fetch_metadata(key)
        self.assertEqual(meta, meta2)

        # Get it back. 
        stream = my_s3.fetch_to_stream(key)
        value = (stream.read()).decode('utf-8')
        stream.close()
        self.assertEqual(data, value)

        # Delete the object. 
        my_s3.delete(key)
        exists = my_s3.exists(key)
        self.assertFalse(exists)

    def test_s3_references(self):
        """Show that we can upload and download objects using files"""
        locator = "https://test1-service-goldfin-io.s3.us-west-1.amazonaws.com/tenant/e1543a6e/8e1ae5fb"
        s3_ref = s3.S3Ref(locator)
        self.assertEqual("test1-service-goldfin-io", s3_ref.bucket)
        self.assertEqual("us-west-1", s3_ref.region)
        self.assertEqual("tenant/e1543a6e/8e1ae5fb", s3_ref.key)


if __name__ == '__main__':
    unittest.main()
