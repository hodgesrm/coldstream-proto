#!/usr/bin/env python3
# Copyright (c) 2018 Robert Hodges.  All rights reserved. 

import logging
import sys
import tempfile
import unittest
import uuid
import warnings
import yaml

import goldfin_ocr.sqs as sqs
import goldfin_ocr.util as util

# Set log level. 
logging.basicConfig(filename="output.log", level=logging.INFO)
logger = logging.getLogger(__name__)


def get_sqs_connection(queue):
    """Allocate connection from configuration file"""
    config = util.get_required_config("service.yaml")
    group = config['aws']['group']
    access_key_id = config['aws']['accessKeyId']
    secret_access_key = config['aws']['secretAccessKey']
    region = config['aws']['region']

    return sqs.SqsConnection(queue, group=group, 
                access_key_id=access_key_id, 
                secret_access_key=secret_access_key, 
                region=region)

class TestSqs(unittest.TestCase):
    def setUp(self):
        """Suppress warnings generated by boto3 on Python 3.5"""
        if sys.version_info < (3,6):
            warnings.simplefilter("ignore", ResourceWarning)

    def test_sqs_create_delete(self):
        """Show that we can create and delete a queue"""
        my_sqs = get_sqs_connection("sqs-connection-create-delete")

        # Delete the queue if it exists. 
        my_sqs.queueDelete()
        self.assertFalse(my_sqs.queueExists())

        # Create the queue. 
        my_sqs.queueCreate()
        self.assertTrue(my_sqs.queueExists())

        # Now delete it. 
        my_sqs.queueDelete()
        self.assertFalse(my_sqs.queueExists())

    def test_sqs_send_receive(self):
        """Show that we can send and receive from a queue"""
        my_sqs = get_sqs_connection("sqs-connection-send-receive")

        # Delete the queue if it exists. 
        my_sqs.queueDelete()
        self.assertFalse(my_sqs.queueExists())

        # Create the queue.  (This will fail if the queue was just deleted.)
        my_sqs.queueCreate()
        self.assertTrue(my_sqs.queueExists())

        # Create a message and submit to the queue. 
        request = sqs.StructuredMessage(operation="test", type="request",
                      xact_tag="test-transaction", tenant_id=str(uuid.uuid4()),
                      content="hello")
        logger.info("Sending message: {0}".format(request))
        my_sqs.send(request)

        # Receive the message back and confirm the content is the same. 
        received = my_sqs.receive()
        logger.info("Received message: {0}".format(received))
        receipt_handle = received.receipt_handle
        received.receipt_handle = None

        self.assertIsNotNone(received)
        self.assertEqual("hello", received.content)
        self.assertEqual(request, received)

        # Delete the message from the queue. 
        my_sqs.delete(receipt_handle=receipt_handle)

        # Clean up by deleting the queue. 
        my_sqs.queueDelete()
