# coding: utf-8

"""
    Goldfin Invoice Processing API

    Goldfin Invoice Analysis

    OpenAPI spec version: 1.0.0
    Contact: rhodges@skylineresearch.comm
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InvoiceEnvelope(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'description': 'str',
        'tags': 'str',
        'state': 'str',
        'source': 'Document',
        'ocr': 'OcrScan',
        'content': 'Invoice',
        'creation_date': 'str'
    }

    attribute_map = {
        'id': 'id',
        'description': 'description',
        'tags': 'tags',
        'state': 'state',
        'source': 'source',
        'ocr': 'ocr',
        'content': 'content',
        'creation_date': 'creationDate'
    }

    def __init__(self, id=None, description=None, tags=None, state=None, source=None, ocr=None, content=None, creation_date=None):
        """
        InvoiceEnvelope - a model defined in Swagger
        """

        self._id = None
        self._description = None
        self._tags = None
        self._state = None
        self._source = None
        self._ocr = None
        self._content = None
        self._creation_date = None

        if id is not None:
          self.id = id
        if description is not None:
          self.description = description
        if tags is not None:
          self.tags = tags
        if state is not None:
          self.state = state
        if source is not None:
          self.source = source
        if ocr is not None:
          self.ocr = ocr
        if content is not None:
          self.content = content
        if creation_date is not None:
          self.creation_date = creation_date

    @property
    def id(self):
        """
        Gets the id of this InvoiceEnvelope.
        Unique invoice id

        :return: The id of this InvoiceEnvelope.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this InvoiceEnvelope.
        Unique invoice id

        :param id: The id of this InvoiceEnvelope.
        :type: str
        """

        self._id = id

    @property
    def description(self):
        """
        Gets the description of this InvoiceEnvelope.
        A user-provided description of the invoice

        :return: The description of this InvoiceEnvelope.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this InvoiceEnvelope.
        A user-provided description of the invoice

        :param description: The description of this InvoiceEnvelope.
        :type: str
        """

        self._description = description

    @property
    def tags(self):
        """
        Gets the tags of this InvoiceEnvelope.
        A user-provided list of name-value pairs that describe the invoice

        :return: The tags of this InvoiceEnvelope.
        :rtype: str
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this InvoiceEnvelope.
        A user-provided list of name-value pairs that describe the invoice

        :param tags: The tags of this InvoiceEnvelope.
        :type: str
        """

        self._tags = tags

    @property
    def state(self):
        """
        Gets the state of this InvoiceEnvelope.
        The current processing state of the invoice.  The invoice field is available once the invoice is interpreted.

        :return: The state of this InvoiceEnvelope.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this InvoiceEnvelope.
        The current processing state of the invoice.  The invoice field is available once the invoice is interpreted.

        :param state: The state of this InvoiceEnvelope.
        :type: str
        """
        allowed_values = ["CREATED", "SCANNED", "INTERPRETED"]
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def source(self):
        """
        Gets the source of this InvoiceEnvelope.

        :return: The source of this InvoiceEnvelope.
        :rtype: Document
        """
        return self._source

    @source.setter
    def source(self, source):
        """
        Sets the source of this InvoiceEnvelope.

        :param source: The source of this InvoiceEnvelope.
        :type: Document
        """

        self._source = source

    @property
    def ocr(self):
        """
        Gets the ocr of this InvoiceEnvelope.

        :return: The ocr of this InvoiceEnvelope.
        :rtype: OcrScan
        """
        return self._ocr

    @ocr.setter
    def ocr(self, ocr):
        """
        Sets the ocr of this InvoiceEnvelope.

        :param ocr: The ocr of this InvoiceEnvelope.
        :type: OcrScan
        """

        self._ocr = ocr

    @property
    def content(self):
        """
        Gets the content of this InvoiceEnvelope.

        :return: The content of this InvoiceEnvelope.
        :rtype: Invoice
        """
        return self._content

    @content.setter
    def content(self, content):
        """
        Sets the content of this InvoiceEnvelope.

        :param content: The content of this InvoiceEnvelope.
        :type: Invoice
        """

        self._content = content

    @property
    def creation_date(self):
        """
        Gets the creation_date of this InvoiceEnvelope.
        Date invoice record was created

        :return: The creation_date of this InvoiceEnvelope.
        :rtype: str
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """
        Sets the creation_date of this InvoiceEnvelope.
        Date invoice record was created

        :param creation_date: The creation_date of this InvoiceEnvelope.
        :type: str
        """

        self._creation_date = creation_date

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InvoiceEnvelope):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
