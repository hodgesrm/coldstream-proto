# coding: utf-8

"""
    Coldstream Prototype

    Coldstream model for invoice processing. 

    OpenAPI spec version: 1.0.0
    Contact: rhodges@skylineresearch.comm
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class StorageDevice(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'capacity': 'int',
        'storage_type': 'str',
        'model': 'str',
        'manufacturer': 'str',
        'interface_type': 'str',
        'raid_type': 'str'
    }

    attribute_map = {
        'name': 'name',
        'capacity': 'capacity',
        'storage_type': 'storageType',
        'model': 'model',
        'manufacturer': 'manufacturer',
        'interface_type': 'interfaceType',
        'raid_type': 'raidType'
    }

    def __init__(self, name=None, capacity=None, storage_type=None, model=None, manufacturer=None, interface_type=None, raid_type=None):
        """
        StorageDevice - a model defined in Swagger
        """

        self._name = None
        self._capacity = None
        self._storage_type = None
        self._model = None
        self._manufacturer = None
        self._interface_type = None
        self._raid_type = None

        if name is not None:
          self.name = name
        if capacity is not None:
          self.capacity = capacity
        if storage_type is not None:
          self.storage_type = storage_type
        if model is not None:
          self.model = model
        if manufacturer is not None:
          self.manufacturer = manufacturer
        if interface_type is not None:
          self.interface_type = interface_type
        if raid_type is not None:
          self.raid_type = raid_type

    @property
    def name(self):
        """
        Gets the name of this StorageDevice.
        Device name

        :return: The name of this StorageDevice.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this StorageDevice.
        Device name

        :param name: The name of this StorageDevice.
        :type: str
        """

        self._name = name

    @property
    def capacity(self):
        """
        Gets the capacity of this StorageDevice.
        Capacity in bytes

        :return: The capacity of this StorageDevice.
        :rtype: int
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """
        Sets the capacity of this StorageDevice.
        Capacity in bytes

        :param capacity: The capacity of this StorageDevice.
        :type: int
        """

        self._capacity = capacity

    @property
    def storage_type(self):
        """
        Gets the storage_type of this StorageDevice.
        Storage type

        :return: The storage_type of this StorageDevice.
        :rtype: str
        """
        return self._storage_type

    @storage_type.setter
    def storage_type(self, storage_type):
        """
        Sets the storage_type of this StorageDevice.
        Storage type

        :param storage_type: The storage_type of this StorageDevice.
        :type: str
        """
        allowed_values = ["SSD", "HD"]
        if storage_type not in allowed_values:
            raise ValueError(
                "Invalid value for `storage_type` ({0}), must be one of {1}"
                .format(storage_type, allowed_values)
            )

        self._storage_type = storage_type

    @property
    def model(self):
        """
        Gets the model of this StorageDevice.
        Device model name

        :return: The model of this StorageDevice.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """
        Sets the model of this StorageDevice.
        Device model name

        :param model: The model of this StorageDevice.
        :type: str
        """

        self._model = model

    @property
    def manufacturer(self):
        """
        Gets the manufacturer of this StorageDevice.
        Device manufacturer

        :return: The manufacturer of this StorageDevice.
        :rtype: str
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """
        Sets the manufacturer of this StorageDevice.
        Device manufacturer

        :param manufacturer: The manufacturer of this StorageDevice.
        :type: str
        """

        self._manufacturer = manufacturer

    @property
    def interface_type(self):
        """
        Gets the interface_type of this StorageDevice.
        Storage interface type

        :return: The interface_type of this StorageDevice.
        :rtype: str
        """
        return self._interface_type

    @interface_type.setter
    def interface_type(self, interface_type):
        """
        Sets the interface_type of this StorageDevice.
        Storage interface type

        :param interface_type: The interface_type of this StorageDevice.
        :type: str
        """
        allowed_values = ["SATA-2", "SATA-3", "OTHER"]
        if interface_type not in allowed_values:
            raise ValueError(
                "Invalid value for `interface_type` ({0}), must be one of {1}"
                .format(interface_type, allowed_values)
            )

        self._interface_type = interface_type

    @property
    def raid_type(self):
        """
        Gets the raid_type of this StorageDevice.
        RAID type

        :return: The raid_type of this StorageDevice.
        :rtype: str
        """
        return self._raid_type

    @raid_type.setter
    def raid_type(self, raid_type):
        """
        Sets the raid_type of this StorageDevice.
        RAID type

        :param raid_type: The raid_type of this StorageDevice.
        :type: str
        """
        allowed_values = ["NONE", "RAID1", "RAID5", "RAID10", "OTHER"]
        if raid_type not in allowed_values:
            raise ValueError(
                "Invalid value for `raid_type` ({0}), must be one of {1}"
                .format(raid_type, allowed_values)
            )

        self._raid_type = raid_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, StorageDevice):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
