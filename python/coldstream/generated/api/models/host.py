# coding: utf-8

"""
    Goldfin Invoice Processing API

    Goldfin Invoice Analysis

    OpenAPI spec version: 1.0.0
    Contact: rhodges@skylineresearch.comm
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Host(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'identifier': 'str',
        'vendor': 'str',
        'name': 'str',
        'type': 'str',
        'region': 'str',
        'datacenter': 'str',
        'cpu': 'List[CPU]',
        'memory': 'List[Memory]',
        'os': 'OperatingSystem',
        'storage': 'List[StorageDevice]',
        'network': 'List[NetworkConnection]',
        'power': 'List[PowerSupply]',
        'start_date': 'str',
        'duration': 'float',
        'cost': 'float',
        'hourly_cost': 'float',
        'daily_cost': 'float',
        'weekly_cost': 'float',
        'monthly_cost': 'float',
        'currency': 'str'
    }

    attribute_map = {
        'id': 'id',
        'identifier': 'identifier',
        'vendor': 'vendor',
        'name': 'name',
        'type': 'type',
        'region': 'region',
        'datacenter': 'datacenter',
        'cpu': 'cpu',
        'memory': 'memory',
        'os': 'os',
        'storage': 'storage',
        'network': 'network',
        'power': 'power',
        'start_date': 'startDate',
        'duration': 'duration',
        'cost': 'cost',
        'hourly_cost': 'hourlyCost',
        'daily_cost': 'dailyCost',
        'weekly_cost': 'weeklyCost',
        'monthly_cost': 'monthlyCost',
        'currency': 'currency'
    }

    def __init__(self, id=None, identifier=None, vendor=None, name=None, type=None, region=None, datacenter=None, cpu=None, memory=None, os=None, storage=None, network=None, power=None, start_date=None, duration=None, cost=None, hourly_cost=None, daily_cost=None, weekly_cost=None, monthly_cost=None, currency=None):
        """
        Host - a model defined in Swagger
        """

        self._id = None
        self._identifier = None
        self._vendor = None
        self._name = None
        self._type = None
        self._region = None
        self._datacenter = None
        self._cpu = None
        self._memory = None
        self._os = None
        self._storage = None
        self._network = None
        self._power = None
        self._start_date = None
        self._duration = None
        self._cost = None
        self._hourly_cost = None
        self._daily_cost = None
        self._weekly_cost = None
        self._monthly_cost = None
        self._currency = None

        if id is not None:
          self.id = id
        if identifier is not None:
          self.identifier = identifier
        if vendor is not None:
          self.vendor = vendor
        if name is not None:
          self.name = name
        if type is not None:
          self.type = type
        if region is not None:
          self.region = region
        if datacenter is not None:
          self.datacenter = datacenter
        if cpu is not None:
          self.cpu = cpu
        if memory is not None:
          self.memory = memory
        if os is not None:
          self.os = os
        if storage is not None:
          self.storage = storage
        if network is not None:
          self.network = network
        if power is not None:
          self.power = power
        if start_date is not None:
          self.start_date = start_date
        if duration is not None:
          self.duration = duration
        if cost is not None:
          self.cost = cost
        if hourly_cost is not None:
          self.hourly_cost = hourly_cost
        if daily_cost is not None:
          self.daily_cost = daily_cost
        if weekly_cost is not None:
          self.weekly_cost = weekly_cost
        if monthly_cost is not None:
          self.monthly_cost = monthly_cost
        if currency is not None:
          self.currency = currency

    @property
    def id(self):
        """
        Gets the id of this Host.
        Unique host descriptor ID

        :return: The id of this Host.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Host.
        Unique host descriptor ID

        :param id: The id of this Host.
        :type: str
        """

        self._id = id

    @property
    def identifier(self):
        """
        Gets the identifier of this Host.
        Inventory identification key

        :return: The identifier of this Host.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """
        Sets the identifier of this Host.
        Inventory identification key

        :param identifier: The identifier of this Host.
        :type: str
        """

        self._identifier = identifier

    @property
    def vendor(self):
        """
        Gets the vendor of this Host.
        Vendor identification key

        :return: The vendor of this Host.
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """
        Sets the vendor of this Host.
        Vendor identification key

        :param vendor: The vendor of this Host.
        :type: str
        """

        self._vendor = vendor

    @property
    def name(self):
        """
        Gets the name of this Host.
        The host name

        :return: The name of this Host.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Host.
        The host name

        :param name: The name of this Host.
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """
        Gets the type of this Host.
        Host type

        :return: The type of this Host.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this Host.
        Host type

        :param type: The type of this Host.
        :type: str
        """
        allowed_values = ["DEDICATED", "CLOUD"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def region(self):
        """
        Gets the region of this Host.
        The region where this host runs, e.g., a country or a public cloud region

        :return: The region of this Host.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """
        Sets the region of this Host.
        The region where this host runs, e.g., a country or a public cloud region

        :param region: The region of this Host.
        :type: str
        """

        self._region = region

    @property
    def datacenter(self):
        """
        Gets the datacenter of this Host.
        The datacenter where this host runs, e.g., a physical datacenter or a public cloud availability zone

        :return: The datacenter of this Host.
        :rtype: str
        """
        return self._datacenter

    @datacenter.setter
    def datacenter(self, datacenter):
        """
        Sets the datacenter of this Host.
        The datacenter where this host runs, e.g., a physical datacenter or a public cloud availability zone

        :param datacenter: The datacenter of this Host.
        :type: str
        """

        self._datacenter = datacenter

    @property
    def cpu(self):
        """
        Gets the cpu of this Host.

        :return: The cpu of this Host.
        :rtype: List[CPU]
        """
        return self._cpu

    @cpu.setter
    def cpu(self, cpu):
        """
        Sets the cpu of this Host.

        :param cpu: The cpu of this Host.
        :type: List[CPU]
        """

        self._cpu = cpu

    @property
    def memory(self):
        """
        Gets the memory of this Host.

        :return: The memory of this Host.
        :rtype: List[Memory]
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """
        Sets the memory of this Host.

        :param memory: The memory of this Host.
        :type: List[Memory]
        """

        self._memory = memory

    @property
    def os(self):
        """
        Gets the os of this Host.

        :return: The os of this Host.
        :rtype: OperatingSystem
        """
        return self._os

    @os.setter
    def os(self, os):
        """
        Sets the os of this Host.

        :param os: The os of this Host.
        :type: OperatingSystem
        """

        self._os = os

    @property
    def storage(self):
        """
        Gets the storage of this Host.

        :return: The storage of this Host.
        :rtype: List[StorageDevice]
        """
        return self._storage

    @storage.setter
    def storage(self, storage):
        """
        Sets the storage of this Host.

        :param storage: The storage of this Host.
        :type: List[StorageDevice]
        """

        self._storage = storage

    @property
    def network(self):
        """
        Gets the network of this Host.

        :return: The network of this Host.
        :rtype: List[NetworkConnection]
        """
        return self._network

    @network.setter
    def network(self, network):
        """
        Sets the network of this Host.

        :param network: The network of this Host.
        :type: List[NetworkConnection]
        """

        self._network = network

    @property
    def power(self):
        """
        Gets the power of this Host.

        :return: The power of this Host.
        :rtype: List[PowerSupply]
        """
        return self._power

    @power.setter
    def power(self, power):
        """
        Sets the power of this Host.

        :param power: The power of this Host.
        :type: List[PowerSupply]
        """

        self._power = power

    @property
    def start_date(self):
        """
        Gets the start_date of this Host.
        Begining of the accounting time range for this entry

        :return: The start_date of this Host.
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """
        Sets the start_date of this Host.
        Begining of the accounting time range for this entry

        :param start_date: The start_date of this Host.
        :type: str
        """

        self._start_date = start_date

    @property
    def duration(self):
        """
        Gets the duration of this Host.
        Length of the accounting time range in seconds

        :return: The duration of this Host.
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """
        Sets the duration of this Host.
        Length of the accounting time range in seconds

        :param duration: The duration of this Host.
        :type: float
        """

        self._duration = duration

    @property
    def cost(self):
        """
        Gets the cost of this Host.
        Cost for this inventory item over the time range

        :return: The cost of this Host.
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """
        Sets the cost of this Host.
        Cost for this inventory item over the time range

        :param cost: The cost of this Host.
        :type: float
        """

        self._cost = cost

    @property
    def hourly_cost(self):
        """
        Gets the hourly_cost of this Host.
        Normalized hourly cost of this entity

        :return: The hourly_cost of this Host.
        :rtype: float
        """
        return self._hourly_cost

    @hourly_cost.setter
    def hourly_cost(self, hourly_cost):
        """
        Sets the hourly_cost of this Host.
        Normalized hourly cost of this entity

        :param hourly_cost: The hourly_cost of this Host.
        :type: float
        """

        self._hourly_cost = hourly_cost

    @property
    def daily_cost(self):
        """
        Gets the daily_cost of this Host.
        Cost of this entity normalized to days

        :return: The daily_cost of this Host.
        :rtype: float
        """
        return self._daily_cost

    @daily_cost.setter
    def daily_cost(self, daily_cost):
        """
        Sets the daily_cost of this Host.
        Cost of this entity normalized to days

        :param daily_cost: The daily_cost of this Host.
        :type: float
        """

        self._daily_cost = daily_cost

    @property
    def weekly_cost(self):
        """
        Gets the weekly_cost of this Host.
        Cost of this entity normalized to weeks

        :return: The weekly_cost of this Host.
        :rtype: float
        """
        return self._weekly_cost

    @weekly_cost.setter
    def weekly_cost(self, weekly_cost):
        """
        Sets the weekly_cost of this Host.
        Cost of this entity normalized to weeks

        :param weekly_cost: The weekly_cost of this Host.
        :type: float
        """

        self._weekly_cost = weekly_cost

    @property
    def monthly_cost(self):
        """
        Gets the monthly_cost of this Host.
        Cost of this entity normalized to months

        :return: The monthly_cost of this Host.
        :rtype: float
        """
        return self._monthly_cost

    @monthly_cost.setter
    def monthly_cost(self, monthly_cost):
        """
        Sets the monthly_cost of this Host.
        Cost of this entity normalized to months

        :param monthly_cost: The monthly_cost of this Host.
        :type: float
        """

        self._monthly_cost = monthly_cost

    @property
    def currency(self):
        """
        Gets the currency of this Host.
        Currency used for cost data

        :return: The currency of this Host.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """
        Sets the currency of this Host.
        Currency used for cost data

        :param currency: The currency of this Host.
        :type: str
        """

        self._currency = currency

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Host):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
