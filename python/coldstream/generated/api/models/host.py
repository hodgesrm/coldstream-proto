# coding: utf-8

"""
    Coldstream Prototype

    Coldstream model for invoice processing. 

    OpenAPI spec version: 1.0.0
    Contact: rhodges@skylineresearch.comm
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Host(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'identifier': 'str',
        'name': 'str',
        'cpu': 'list[CPU]',
        'memory': 'list[Memory]',
        'os': 'OperatingSystem',
        'storage': 'list[StorageDevice]',
        'network': 'list[NetworkConnection]',
        'power': 'list[PowerSupply]'
    }

    attribute_map = {
        'id': 'id',
        'identifier': 'identifier',
        'name': 'name',
        'cpu': 'cpu',
        'memory': 'memory',
        'os': 'os',
        'storage': 'storage',
        'network': 'network',
        'power': 'power'
    }

    def __init__(self, id=None, identifier=None, name=None, cpu=None, memory=None, os=None, storage=None, network=None, power=None):
        """
        Host - a model defined in Swagger
        """

        self._id = None
        self._identifier = None
        self._name = None
        self._cpu = None
        self._memory = None
        self._os = None
        self._storage = None
        self._network = None
        self._power = None

        if id is not None:
          self.id = id
        if identifier is not None:
          self.identifier = identifier
        if name is not None:
          self.name = name
        if cpu is not None:
          self.cpu = cpu
        if memory is not None:
          self.memory = memory
        if os is not None:
          self.os = os
        if storage is not None:
          self.storage = storage
        if network is not None:
          self.network = network
        if power is not None:
          self.power = power

    @property
    def id(self):
        """
        Gets the id of this Host.
        Unique host descriptor ID

        :return: The id of this Host.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Host.
        Unique host descriptor ID

        :param id: The id of this Host.
        :type: str
        """

        self._id = id

    @property
    def identifier(self):
        """
        Gets the identifier of this Host.
        Host identification key

        :return: The identifier of this Host.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """
        Sets the identifier of this Host.
        Host identification key

        :param identifier: The identifier of this Host.
        :type: str
        """

        self._identifier = identifier

    @property
    def name(self):
        """
        Gets the name of this Host.
        The host name

        :return: The name of this Host.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Host.
        The host name

        :param name: The name of this Host.
        :type: str
        """

        self._name = name

    @property
    def cpu(self):
        """
        Gets the cpu of this Host.

        :return: The cpu of this Host.
        :rtype: list[CPU]
        """
        return self._cpu

    @cpu.setter
    def cpu(self, cpu):
        """
        Sets the cpu of this Host.

        :param cpu: The cpu of this Host.
        :type: list[CPU]
        """

        self._cpu = cpu

    @property
    def memory(self):
        """
        Gets the memory of this Host.

        :return: The memory of this Host.
        :rtype: list[Memory]
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """
        Sets the memory of this Host.

        :param memory: The memory of this Host.
        :type: list[Memory]
        """

        self._memory = memory

    @property
    def os(self):
        """
        Gets the os of this Host.

        :return: The os of this Host.
        :rtype: OperatingSystem
        """
        return self._os

    @os.setter
    def os(self, os):
        """
        Sets the os of this Host.

        :param os: The os of this Host.
        :type: OperatingSystem
        """

        self._os = os

    @property
    def storage(self):
        """
        Gets the storage of this Host.

        :return: The storage of this Host.
        :rtype: list[StorageDevice]
        """
        return self._storage

    @storage.setter
    def storage(self, storage):
        """
        Sets the storage of this Host.

        :param storage: The storage of this Host.
        :type: list[StorageDevice]
        """

        self._storage = storage

    @property
    def network(self):
        """
        Gets the network of this Host.

        :return: The network of this Host.
        :rtype: list[NetworkConnection]
        """
        return self._network

    @network.setter
    def network(self, network):
        """
        Sets the network of this Host.

        :param network: The network of this Host.
        :type: list[NetworkConnection]
        """

        self._network = network

    @property
    def power(self):
        """
        Gets the power of this Host.

        :return: The power of this Host.
        :rtype: list[PowerSupply]
        """
        return self._power

    @power.setter
    def power(self, power):
        """
        Sets the power of this Host.

        :param power: The power of this Host.
        :type: list[PowerSupply]
        """

        self._power = power

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Host):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
