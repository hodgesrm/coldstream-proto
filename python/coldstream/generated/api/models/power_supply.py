# coding: utf-8

"""
    Coldstream Prototype

    Coldstream model for invoice processing. 

    OpenAPI spec version: 1.0.0
    Contact: rhodges@skylineresearch.comm
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PowerSupply(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'watts': 'int',
        'model': 'str',
        'manufacturer': 'str'
    }

    attribute_map = {
        'watts': 'watts',
        'model': 'model',
        'manufacturer': 'manufacturer'
    }

    def __init__(self, watts=None, model=None, manufacturer=None):
        """
        PowerSupply - a model defined in Swagger
        """

        self._watts = None
        self._model = None
        self._manufacturer = None

        if watts is not None:
          self.watts = watts
        if model is not None:
          self.model = model
        if manufacturer is not None:
          self.manufacturer = manufacturer

    @property
    def watts(self):
        """
        Gets the watts of this PowerSupply.
        Available power

        :return: The watts of this PowerSupply.
        :rtype: int
        """
        return self._watts

    @watts.setter
    def watts(self, watts):
        """
        Sets the watts of this PowerSupply.
        Available power

        :param watts: The watts of this PowerSupply.
        :type: int
        """

        self._watts = watts

    @property
    def model(self):
        """
        Gets the model of this PowerSupply.
        Device model name

        :return: The model of this PowerSupply.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """
        Sets the model of this PowerSupply.
        Device model name

        :param model: The model of this PowerSupply.
        :type: str
        """

        self._model = model

    @property
    def manufacturer(self):
        """
        Gets the manufacturer of this PowerSupply.
        Device manufacturer

        :return: The manufacturer of this PowerSupply.
        :rtype: str
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """
        Sets the manufacturer of this PowerSupply.
        Device manufacturer

        :param manufacturer: The manufacturer of this PowerSupply.
        :type: str
        """

        self._manufacturer = manufacturer

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PowerSupply):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
